[tool.poetry]
name = "snowflake-machine-learning-system"
version = "0.1.0"
description = ""
authors = ["dmaruyama-51 <0501awasuram@gmail.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
snowflake-snowpark-python = {extras = ["pandas"], version = "^1.25.0"}
ucimlrepo = "^0.0.7"
snowflake-ml-python = "^1.7.2"
optuna = "^4.1.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.8.0"
mypy = "^1.13.0"
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
types-pyyaml = "^6.0.12.20240917"
ipykernel = "^6.29.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = [
    "src/adhoc/*",
    "src/utils/logger.py",
    "src/tasks/*",
    "src/data/source.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "^\\s*logger\\.\\w+\\(.*\\)",
    "^\\s*logging\\.\\w+\\(.*\\)",
    "pass",
]

[tool.ruff]
line-length = 88

[tool.ruff.isort]
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["src"]

[tool.ruff.lint]
# チェックするエラーの種類
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
]
# 除外するエラーの種類
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "B904", # raise ... from ... になっていない場合のエラーを無視
]